nodejs:
  aadIdentityName:
  image: ${IMAGE_NAME}
  ingressHost: ${SERVICE_FQDN}
  spec:
    template:
      metadata:
        annotations:
          pod.beta.kubernetes.io/init-containers: '[{"name": "volume-mount-hack", "image": "my-image:1.2.3", "imagePullPolicy": "Always", "securityContext": {"runAsUser": 0, "command": ["/bin/sh", "-c", "set -e && echo \"[ $(hostname --fqdn) ] Chowning volume mounts to 1000:1000 ..\" && set -x && chown -R 1000:1000 /data /var/log/gigawatt.io"], "volumeMounts": [{"name": "storage", "mountPath": "/data"}, {"name": "log-dir", "mountPath": "/var/log/gigawatt.io"}]}]'
    command: ["/bin/sh"]
    args: ["-c", "yarn create:schema"]
    # These containers are run during pod initialization
    initContainers:
      name: check-db-ready
      image: postgres:9.6.5
      command: ['sh', '-c',
                'until pg_isready -U xui_tc -h $POSTGRES_SERVER_NAME -p xui_tc;
              do echo waiting for database; sleep 2; done;']
      environment:
        POSTGRES_SERVER_NAME: "{{ .Release.Name }}-postgresql"
  environment:
       NODE_TLS_REJECT_UNAUTHORIZED: '0'
       XUI_ENV: preview
       POSTGRES_SERVER_NAME: "{{ .Release.Name }}-postgresql"
       POSTGRES_USERNAME: "xui_tc"
       POSTGRES_PASSWORD: "xui_tc"
       POSTGRES_DB_NAME: "xui_tc"
  keyVaults:
    rpx:
      secrets:
        - mc-s2s-client-secret
postgresql:
  enabled: true
  postgresqlUsername: xui_tc
  postgresqlPassword: xui_tc
  postgresqlDatabase: xui_tc
  persistence:
    enabled: false
