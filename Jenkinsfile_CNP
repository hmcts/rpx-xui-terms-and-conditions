#!groovy

properties([
    [
        $class       : 'GithubProjectProperty',
        displayName  : 'Terms and Conditions Microservice',
        projectUrlStr: 'https://github.com/hmcts/rpx-xui-terms-and-conditions'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

def type      = "nodejs"
def product   = "xui"
def component = "terms-and-conditions"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'rpx-${env}': [
    secret('mc-s2s-client-secret', 'S2S_SECRET'),
    secret('mc-idam-client-secret', 'IDAM_SECRET'),
    secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
    secret('postgresql-server-name', 'POSTGRES_SERVER_NAME'),
    secret('postgresql-server-port', 'POSTGRES_SERVER_PORT'),
    secret('postgresql-dbname', 'POSTGRES_DB_NAME'),
    secret('postgresql-ssl', 'POSTGRES_SSL'),
    secret('postgresql-username', 'POSTGRES_USERNAME'),
    secret('postgresql-pw', 'POSTGRES_PASSWORD')
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline("nodejs", product, component) {

    loadVaultSecrets(secrets)

    enableDockerBuild()

    installCharts()

    disableLegacyDeployment()

    enableAksStagingDeployment()

    after('build') {
            yarnBuilder.yarn('build')

            publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "reports/lint",
                reportFiles          : 'index.html',
                reportName           : 'node lint Report'
            ])

        }

    after('test') {

            publishHTML ( [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "reports/coverage",
                reportFiles          : "index.html",
                reportName           : "node coverage tests"
            ])

        }

    after('smoketest:aat') {
        yarnBuilder.yarn('compile')
        yarnBuilder.yarn('migrate')
    }

}

